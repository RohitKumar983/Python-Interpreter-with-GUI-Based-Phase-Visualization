
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSrightNOTnonassocLPARENRPARENAND BREAK COLON COMMA CONTINUE DEF DIVIDE DOT ELSE EQ EQUALS EXCEPT FALSE FOR GE GT IDENTIFIER IF IN LBRACKET LE LEN LPAREN LT MINUS MODULO NE NEWLINE NOT NUMBER OR PLUS PRINT RANGE RBRACKET RETURN RPAREN STRING TIMES TRUE TRY WHILEprogram : statementsstatements : statement\n                  | statements statementstatement : print_stmt\n                | assign_stmt\n                | if_stmt\n                | while_stmt\n                | for_stmt\n                | function_def\n                | return_stmt\n                | break_stmt\n                | continue_stmt\n                | try_except_stmt\n                | NEWLINEprint_stmt : PRINT LPAREN expr RPAREN\n                 | PRINT exprassign_stmt : IDENTIFIER EQUALS expr\n                  | IDENTIFIER LBRACKET expr RBRACKET EQUALS exprif_stmt : IF expr COLON statements\n               | IF expr COLON statements ELSE COLON statementswhile_stmt : WHILE expr COLON statementsfor_stmt : FOR IDENTIFIER IN expr COLON statementsfunction_def : DEF IDENTIFIER LPAREN param_list RPAREN COLON statementsparam_list : IDENTIFIER\n                 | param_list COMMA IDENTIFIER\n                 | emptyreturn_stmt : RETURN expr\n                  | RETURNbreak_stmt : BREAKcontinue_stmt : CONTINUEtry_except_stmt : TRY COLON statements EXCEPT COLON statementsexpr : term\n            | expr PLUS term\n            | expr MINUS term\n            | expr TIMES term\n            | expr DIVIDE term\n            | expr MODULO term\n            | expr GT term\n            | expr LT term\n            | expr GE term\n            | expr LE term\n            | expr EQ term\n            | expr NE term\n            | expr AND term\n            | expr OR termterm : factor\n            | NOT term\n            | MINUS term %prec UMINUSfactor : NUMBER\n              | STRING\n              | TRUE\n              | FALSE\n              | IDENTIFIER\n              | list_expr\n              | function_call\n              | string_method\n              | len_function\n              | range_call\n              | LPAREN expr RPARENlist_expr : LBRACKET expr_list RBRACKET\n                | IDENTIFIER LBRACKET expr RBRACKETexpr_list : expr\n                | expr_list COMMA expr\n                | emptyfunction_call : IDENTIFIER LPAREN expr_list RPAREN\n                    | IDENTIFIER LPAREN RPARENstring_method : IDENTIFIER DOT IDENTIFIER LPAREN expr_list RPAREN\n                    | IDENTIFIER DOT IDENTIFIER LPAREN RPARENlen_function : LEN LPAREN expr RPARENrange_call : RANGE LPAREN expr_list RPAREN\n                 | RANGE LPAREN RPARENexpression : IDENTIFIER LPAREN arg_list RPARENarg_list : expression\n                | arg_list COMMA expression\n                | emptyempty :'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,14,-48,-47,-17,14,14,14,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,14,-59,14,-61,-65,-69,-70,14,14,-68,-18,14,14,14,14,-67,14,14,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,15,-48,-47,-17,15,15,15,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,15,-59,15,-61,-65,-69,-70,15,15,-68,-18,15,15,15,15,-67,15,15,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,48,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,77,78,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,105,108,110,111,112,118,119,120,122,123,124,126,128,129,131,132,133,134,135,137,138,139,140,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,36,36,36,50,51,36,-29,-30,-3,36,-16,-32,36,-46,36,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,36,36,36,36,-27,16,36,36,36,36,36,36,36,36,36,36,36,36,36,-48,-47,36,36,103,36,36,-17,16,16,36,114,16,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,36,-71,16,-59,16,-61,-65,36,-69,-70,36,16,136,16,-68,-18,16,16,16,16,-67,16,16,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,17,-48,-47,-17,17,17,17,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,17,-59,17,-61,-65,-69,-70,17,17,-68,-18,17,17,17,17,-67,17,17,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,18,-48,-47,-17,18,18,18,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,18,-59,18,-61,-65,-69,-70,18,18,-68,-18,18,18,18,18,-67,18,18,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,19,-48,-47,-17,19,19,19,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,19,-59,19,-61,-65,-69,-70,19,19,-68,-18,19,19,19,19,-67,19,19,]),'DEF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,20,-48,-47,-17,20,20,20,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,20,-59,20,-61,-65,-69,-70,20,20,-68,-18,20,20,20,20,-67,20,20,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,21,-48,-47,-17,21,21,21,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,21,-59,21,-61,-65,-69,-70,21,21,-68,-18,21,21,21,21,-67,21,21,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,22,-48,-47,-17,22,22,22,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,22,-59,22,-61,-65,-69,-70,22,22,-68,-18,22,22,22,22,-67,22,22,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,23,-48,-47,-17,23,23,23,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,23,-59,23,-61,-65,-69,-70,23,23,-68,-18,23,23,23,23,-67,23,23,]),'TRY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,53,68,69,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,126,129,131,132,133,134,135,137,138,139,140,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,24,-48,-47,-17,24,24,24,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,24,-59,24,-61,-65,-69,-70,24,24,-68,-18,24,24,24,24,-67,24,24,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,68,69,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,131,132,134,137,138,139,140,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,-19,-59,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'EXCEPT':([3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,68,69,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,131,132,134,137,138,139,140,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,117,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,-19,-59,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,14,21,22,23,25,27,28,30,32,33,34,35,36,37,38,39,40,41,52,68,69,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,110,111,112,118,119,122,123,131,132,134,137,138,139,140,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-28,-29,-30,-3,-16,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-27,-48,-47,-17,-15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,125,-59,-21,-61,-65,-69,-70,-68,-18,-22,-31,-67,-20,-23,]),'LPAREN':([15,17,18,21,26,29,31,36,42,43,44,45,46,48,51,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,103,105,120,124,],[26,48,48,48,48,48,48,71,48,76,77,48,48,48,84,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,120,48,48,48,]),'NOT':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([15,17,18,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,77,78,79,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,105,106,108,111,113,118,119,120,121,122,123,124,131,132,138,],[29,29,29,29,29,56,-32,29,-46,29,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,29,29,29,56,29,56,56,56,29,29,29,29,29,29,29,29,29,29,29,29,29,-48,-47,29,29,56,29,29,56,56,56,29,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,56,-66,-60,29,56,-71,-59,56,-61,-65,29,56,-69,-70,29,-68,56,-67,]),'NUMBER':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TRUE':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'FALSE':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'LBRACKET':([15,16,17,18,21,26,29,31,36,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[42,46,42,42,42,42,42,42,70,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'LEN':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'RANGE':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EQUALS':([16,109,],[45,124,]),'COLON':([24,28,30,32,33,34,35,36,37,38,39,40,41,47,49,68,69,87,88,89,90,91,92,93,94,95,96,97,98,99,102,104,108,111,113,117,118,119,122,123,125,127,131,138,],[53,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,80,82,-48,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-66,-60,-71,-59,126,129,-61,-65,-69,-70,133,135,-68,-67,]),'PLUS':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[55,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,55,55,55,55,-48,-47,55,55,55,55,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,55,-66,-60,55,-71,-59,55,-61,-65,55,-69,-70,-68,55,-67,]),'TIMES':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[57,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,57,57,57,57,-48,-47,57,57,57,57,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,57,-66,-60,57,-71,-59,57,-61,-65,57,-69,-70,-68,57,-67,]),'DIVIDE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[58,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,58,58,58,58,-48,-47,58,58,58,58,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,58,-66,-60,58,-71,-59,58,-61,-65,58,-69,-70,-68,58,-67,]),'MODULO':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[59,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,59,59,59,59,-48,-47,59,59,59,59,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,59,-66,-60,59,-71,-59,59,-61,-65,59,-69,-70,-68,59,-67,]),'GT':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[60,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,60,60,60,60,-48,-47,60,60,60,60,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,60,-66,-60,60,-71,-59,60,-61,-65,60,-69,-70,-68,60,-67,]),'LT':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[61,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,61,61,61,61,-48,-47,61,61,61,61,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,61,-66,-60,61,-71,-59,61,-61,-65,61,-69,-70,-68,61,-67,]),'GE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[62,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,62,62,62,62,-48,-47,62,62,62,62,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,62,-66,-60,62,-71,-59,62,-61,-65,62,-69,-70,-68,62,-67,]),'LE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[63,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,63,63,63,63,-48,-47,63,63,63,63,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,63,-66,-60,63,-71,-59,63,-61,-65,63,-69,-70,-68,63,-67,]),'EQ':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[64,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,64,64,64,64,-48,-47,64,64,64,64,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,64,-66,-60,64,-71,-59,64,-61,-65,64,-69,-70,-68,64,-67,]),'NE':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[65,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,65,65,65,65,-48,-47,65,65,65,65,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,65,-66,-60,65,-71,-59,65,-61,-65,65,-69,-70,-68,65,-67,]),'AND':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[66,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,66,66,66,66,-48,-47,66,66,66,66,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,66,-66,-60,66,-71,-59,66,-61,-65,66,-69,-70,-68,66,-67,]),'OR':([27,28,30,32,33,34,35,36,37,38,39,40,41,47,49,52,54,68,69,74,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,108,111,113,118,119,121,122,123,131,132,138,],[67,-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,67,67,67,67,-48,-47,67,67,67,67,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,67,-66,-60,67,-71,-59,67,-61,-65,67,-69,-70,-68,67,-67,]),'RPAREN':([28,30,32,33,34,35,36,37,38,39,40,41,54,68,69,71,74,75,77,81,84,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,106,107,108,111,114,115,116,118,119,120,121,122,123,130,131,136,138,],[-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,86,-48,-47,102,-62,-64,108,111,-76,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,119,-66,-60,122,123,-71,-59,-24,127,-26,-61,-65,131,-63,-69,-70,138,-68,-25,-67,]),'RBRACKET':([28,30,32,33,34,35,36,37,38,39,40,41,42,68,69,73,74,75,79,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,108,111,118,119,121,122,123,131,138,],[-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-76,-48,-47,104,-62,-64,109,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,118,-66,-60,-71,-59,-61,-65,-63,-69,-70,-68,-67,]),'COMMA':([28,30,32,33,34,35,36,37,38,39,40,41,42,68,69,71,73,74,75,77,84,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,107,108,111,114,115,116,118,119,120,121,122,123,130,131,136,138,],[-32,-46,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-76,-48,-47,-76,105,-62,-64,-76,-76,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,105,-66,-60,105,-71,-59,-24,128,-26,-61,-65,-76,-63,-69,-70,105,-68,-25,-67,]),'DOT':([36,],[72,]),'IN':([50,],[83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,53,80,82,126,129,133,135,],[2,85,110,112,134,137,139,140,]),'statement':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[3,25,3,3,3,25,25,25,3,3,3,25,3,25,25,25,]),'print_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assign_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'if_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'while_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'for_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'return_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'break_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'continue_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'try_except_stmt':([0,2,53,80,82,85,110,112,126,129,133,134,135,137,139,140,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expr':([15,17,18,21,26,42,45,46,48,70,71,76,77,83,105,120,124,],[27,47,49,52,54,74,78,79,81,100,74,106,74,113,121,74,132,]),'term':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[28,28,28,28,28,68,69,28,28,28,28,87,88,89,90,91,92,93,94,95,96,97,98,99,28,28,28,28,28,28,28,28,]),'factor':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'list_expr':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'function_call':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'string_method':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'len_function':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'range_call':([15,17,18,21,26,29,31,42,45,46,48,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,76,77,83,105,120,124,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'expr_list':([42,71,77,120,],[73,101,107,130,]),'empty':([42,71,77,84,120,],[75,75,75,116,75,]),'param_list':([84,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','myparser.py',20),
  ('statements -> statement','statements',1,'p_statements','myparser.py',24),
  ('statements -> statements statement','statements',2,'p_statements','myparser.py',25),
  ('statement -> print_stmt','statement',1,'p_statement','myparser.py',32),
  ('statement -> assign_stmt','statement',1,'p_statement','myparser.py',33),
  ('statement -> if_stmt','statement',1,'p_statement','myparser.py',34),
  ('statement -> while_stmt','statement',1,'p_statement','myparser.py',35),
  ('statement -> for_stmt','statement',1,'p_statement','myparser.py',36),
  ('statement -> function_def','statement',1,'p_statement','myparser.py',37),
  ('statement -> return_stmt','statement',1,'p_statement','myparser.py',38),
  ('statement -> break_stmt','statement',1,'p_statement','myparser.py',39),
  ('statement -> continue_stmt','statement',1,'p_statement','myparser.py',40),
  ('statement -> try_except_stmt','statement',1,'p_statement','myparser.py',41),
  ('statement -> NEWLINE','statement',1,'p_statement','myparser.py',42),
  ('print_stmt -> PRINT LPAREN expr RPAREN','print_stmt',4,'p_print_stmt','myparser.py',46),
  ('print_stmt -> PRINT expr','print_stmt',2,'p_print_stmt','myparser.py',47),
  ('assign_stmt -> IDENTIFIER EQUALS expr','assign_stmt',3,'p_assign_stmt','myparser.py',54),
  ('assign_stmt -> IDENTIFIER LBRACKET expr RBRACKET EQUALS expr','assign_stmt',6,'p_assign_stmt','myparser.py',55),
  ('if_stmt -> IF expr COLON statements','if_stmt',4,'p_if_stmt','myparser.py',62),
  ('if_stmt -> IF expr COLON statements ELSE COLON statements','if_stmt',7,'p_if_stmt','myparser.py',63),
  ('while_stmt -> WHILE expr COLON statements','while_stmt',4,'p_while_stmt','myparser.py',70),
  ('for_stmt -> FOR IDENTIFIER IN expr COLON statements','for_stmt',6,'p_for_stmt','myparser.py',74),
  ('function_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON statements','function_def',7,'p_function_def','myparser.py',78),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','myparser.py',82),
  ('param_list -> param_list COMMA IDENTIFIER','param_list',3,'p_param_list','myparser.py',83),
  ('param_list -> empty','param_list',1,'p_param_list','myparser.py',84),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','myparser.py',91),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','myparser.py',92),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','myparser.py',99),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','myparser.py',103),
  ('try_except_stmt -> TRY COLON statements EXCEPT COLON statements','try_except_stmt',6,'p_try_except_stmt','myparser.py',107),
  ('expr -> term','expr',1,'p_expr','myparser.py',111),
  ('expr -> expr PLUS term','expr',3,'p_expr','myparser.py',112),
  ('expr -> expr MINUS term','expr',3,'p_expr','myparser.py',113),
  ('expr -> expr TIMES term','expr',3,'p_expr','myparser.py',114),
  ('expr -> expr DIVIDE term','expr',3,'p_expr','myparser.py',115),
  ('expr -> expr MODULO term','expr',3,'p_expr','myparser.py',116),
  ('expr -> expr GT term','expr',3,'p_expr','myparser.py',117),
  ('expr -> expr LT term','expr',3,'p_expr','myparser.py',118),
  ('expr -> expr GE term','expr',3,'p_expr','myparser.py',119),
  ('expr -> expr LE term','expr',3,'p_expr','myparser.py',120),
  ('expr -> expr EQ term','expr',3,'p_expr','myparser.py',121),
  ('expr -> expr NE term','expr',3,'p_expr','myparser.py',122),
  ('expr -> expr AND term','expr',3,'p_expr','myparser.py',123),
  ('expr -> expr OR term','expr',3,'p_expr','myparser.py',124),
  ('term -> factor','term',1,'p_term','myparser.py',131),
  ('term -> NOT term','term',2,'p_term','myparser.py',132),
  ('term -> MINUS term','term',2,'p_term','myparser.py',133),
  ('factor -> NUMBER','factor',1,'p_factor','myparser.py',140),
  ('factor -> STRING','factor',1,'p_factor','myparser.py',141),
  ('factor -> TRUE','factor',1,'p_factor','myparser.py',142),
  ('factor -> FALSE','factor',1,'p_factor','myparser.py',143),
  ('factor -> IDENTIFIER','factor',1,'p_factor','myparser.py',144),
  ('factor -> list_expr','factor',1,'p_factor','myparser.py',145),
  ('factor -> function_call','factor',1,'p_factor','myparser.py',146),
  ('factor -> string_method','factor',1,'p_factor','myparser.py',147),
  ('factor -> len_function','factor',1,'p_factor','myparser.py',148),
  ('factor -> range_call','factor',1,'p_factor','myparser.py',149),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor','myparser.py',150),
  ('list_expr -> LBRACKET expr_list RBRACKET','list_expr',3,'p_list_expr','myparser.py',157),
  ('list_expr -> IDENTIFIER LBRACKET expr RBRACKET','list_expr',4,'p_list_expr','myparser.py',158),
  ('expr_list -> expr','expr_list',1,'p_expr_list','myparser.py',165),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','myparser.py',166),
  ('expr_list -> empty','expr_list',1,'p_expr_list','myparser.py',167),
  ('function_call -> IDENTIFIER LPAREN expr_list RPAREN','function_call',4,'p_function_call','myparser.py',174),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','myparser.py',175),
  ('string_method -> IDENTIFIER DOT IDENTIFIER LPAREN expr_list RPAREN','string_method',6,'p_string_method','myparser.py',182),
  ('string_method -> IDENTIFIER DOT IDENTIFIER LPAREN RPAREN','string_method',5,'p_string_method','myparser.py',183),
  ('len_function -> LEN LPAREN expr RPAREN','len_function',4,'p_len_function','myparser.py',190),
  ('range_call -> RANGE LPAREN expr_list RPAREN','range_call',4,'p_range_call','myparser.py',194),
  ('range_call -> RANGE LPAREN RPAREN','range_call',3,'p_range_call','myparser.py',195),
  ('expression -> IDENTIFIER LPAREN arg_list RPAREN','expression',4,'p_expression_funccall','myparser.py',205),
  ('arg_list -> expression','arg_list',1,'p_arg_list','myparser.py',209),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','myparser.py',210),
  ('arg_list -> empty','arg_list',1,'p_arg_list','myparser.py',211),
  ('empty -> <empty>','empty',0,'p_empty','myparser.py',218),
]
